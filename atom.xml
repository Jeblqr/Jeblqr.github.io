<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeb&#39;s blog</title>
  
  <subtitle>论一只蒟蒻的自我修养。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jeb.website/"/>
  <updated>2018-08-24T10:19:27.632Z</updated>
  <id>https://www.jeb.website/</id>
  
  <author>
    <name>Jeb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单源点最短路径(上)</title>
    <link href="https://www.jeb.website/details/2018/08-24-DanYuanDianZuiDuanLuJIng.html"/>
    <id>https://www.jeb.website/details/2018/08-24-DanYuanDianZuiDuanLuJIng.html</id>
    <published>2018-08-24T10:19:27.632Z</published>
    <updated>2018-08-24T10:19:27.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单源点最短路径-上"><a href="#单源点最短路径-上" class="headerlink" title="单源点最短路径(上)"></a>单源点最短路径(上)</h2><p><del>依然很可能没有下</del></p><p>科科。<br>说到最短路径，那么首先，最短路径是什么呢？很明显，是一个点到另一个点可行路径的最小权值和（废话）</p><p>上一幅图</p><p><img src="/DanYuanDianZuiDuanLuJIng/wxtlz.png" alt="无向图的例子"></p><p>我们设s=1，t=8，求的就是s~t中可行路径的权值和（要注意，边是双向的）</p><p>当然，最简单的办法是直接建立邻接矩阵，然后循环每个可行路径，最后找到最短路径。这就是Floyd算法。因为每个边都要拓展一次，所以说其时间复杂度是很大的（O(n^3)）。</p><p>所以说，我们这时应该换下思路。在Floyd中，我们使用“点”为标志存储，那我们可不可以使用“边”为标志存储呢？当然可以！邻接图！</p><p>在下文中，我们把边的起点，终点和权值分别叫做x，y和d。我们使用一个结构体来储存边的y,d和上一条同x的边。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> y,d,next;</span><br><span class="line">&#125;node[<span class="number">1000000</span>];</span><br></pre></td></tr></table></figure><p>为了储存上一条同x点边的下标，我们还需要一个数组last。同时，我们还需要一个变量len来储存当前边的下标以及一个数组ans来储存s-&gt;当前点的答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len,last[<span class="number">1000000</span>],ans[<span class="number">1000000</span>];</span><br></pre></td></tr></table></figure><p>好，万事俱备。那么怎么求出最短路呢?先讲一个初级的算法：SPFA (shortest path faster algorithm)。这是Bellman-Ford算法的队列优化，SPFA只在中国大陆通用。发明者是个国人，<a href="https://wenku.baidu.com/view/3b8c5d778e9951e79a892705.html" target="_blank" rel="noopener">这是</a>论文。</p><p>队列优化是什么？当然是广度优先搜索啦！</p><p>我们先将s点入队，并建立一个标记，然后进入一个循环，不断从队列中取出队头并拓展（专业点叫做“松弛”）。问题来了，怎么不断找到同端点的点呢？其实很简单，只需要一个循环就可以了。我们先从last数组中取出最后的一条边，再不断通过当前边的next找下一条边就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[kx].next)<span class="comment">//我们把队头的点叫做kx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再把当前边的y叫做ky，把当前边的d叫做kd。如果ans[ky]&gt;ans[kx]+kd，那么就说明走这条边可能得到最优解，所以我们更新ans[ky]的值并判断有没有打上标记，没有的话，说明没有入队，那我们就把他入队。记得在循环的后面要把那个标记抹掉。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ky=node[i].y;</span><br><span class="line">    <span class="keyword">if</span> (ans[ky]&gt;ans[kx]+node[i].d)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[ky]=ans[kx]+node[i].d;</span><br><span class="line">        <span class="keyword">if</span> (!pd.count(ky))</span><br><span class="line">        &#123;</span><br><span class="line">            pd.insert(ky);</span><br><span class="line">            que.push(ky);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，放出完整代码吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max1 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max2 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max3 Max1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SPFA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pc</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">bool</span> ps[Max3];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x,y,d,next;</span><br><span class="line">    &#125;;</span><br><span class="line">Node node[Max1];</span><br><span class="line">    <span class="keyword">int</span> last[Max2],len,ans[Max1];</span><br><span class="line">    Pc pd;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MakeLine</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> SPFA::Pc::count(<span class="keyword">int</span> k)&#123;<span class="keyword">return</span> (ps[k]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::Pc::insert(<span class="keyword">int</span> k)&#123;ps[k]=<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::Pc::clear()&#123;<span class="built_in">memset</span>(ps,<span class="number">0</span>,<span class="keyword">sizeof</span> ps);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> SPFA::Pc::erase(<span class="keyword">int</span> k)&#123;ps[k]=<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::MakeLine(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    len++;</span><br><span class="line">    node[len].x=x,node[len].y=y,node[len].d=d,node[len].next=last[x];</span><br><span class="line">    last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SPFA::calc(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">    ans[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (que.size())</span><br><span class="line">        que.pop();</span><br><span class="line">    pd.clear();</span><br><span class="line">    que.push(x);</span><br><span class="line">    pd.insert(x);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> kx=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">    pd.erase(kx);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ky=node[i].y;</span><br><span class="line">            <span class="keyword">if</span> (ans[ky]&gt;ans[kx]+node[i].d)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[ky]=ans[kx]+node[i].d;</span><br><span class="line">                <span class="keyword">if</span> (!pd.count(ky))</span><br><span class="line">                &#123;</span><br><span class="line">                    pd.insert(ky);</span><br><span class="line">                    que.push(ky);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[y]==<span class="number">0x7f7f7f7f</span>?<span class="number">-1</span>:ans[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::scan(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v;</span><br><span class="line">        MakeLine(x,y,v);</span><br><span class="line">        MakeLine(y,x,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"></span><br><span class="line">SPFA spfa;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    spfa.scan(m);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;spfa.calc(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法时间复杂度虽然还ok，但是稠密图是会下降为O(VE)。</p><p><del>话说平均复杂度竟然是通过实验得出的，太不靠谱了吧？</del></p><p><font size="1"><br>参考资料：</font></p><p><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95</a></p><p><a href="https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&amp;fromid=11018124&amp;fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&amp;fromid=11018124&amp;fr=aladdin</a></p><font></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单源点最短路径-上&quot;&gt;&lt;a href=&quot;#单源点最短路径-上&quot; class=&quot;headerlink&quot; title=&quot;单源点最短路径(上)&quot;&gt;&lt;/a&gt;单源点最短路径(上)&lt;/h2&gt;&lt;p&gt;&lt;del&gt;依然很可能没有下&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;科科。&lt;br&gt;说到最短路径
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://www.jeb.website/details/2018/08-24-Heap.html"/>
    <id>https://www.jeb.website/details/2018/08-24-Heap.html</id>
    <published>2018-08-24T10:19:09.083Z</published>
    <updated>2018-08-24T10:19:09.083Z</updated>
    
    <content type="html"><![CDATA[<font color="#66ccff" size="6">堆</font><p>好，今天来讲堆。</p><p>先讲一个十分偷懒的方法：STL中的容器：priority_queue（优先队列）</p><p>首先要先包含库,priority_queue包含于queue中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><p>先声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Container</span> = <span class="title">vector</span>&lt;T&gt;,</span></span><br><span class="line"><span class="class">          <span class="title">class</span> <span class="title">Compare</span> = <span class="title">less</span>&lt;typename Container::value_type&gt; &gt; <span class="title">class</span> <span class="title">priority_queue</span>;</span></span><br></pre></td></tr></table></figure><p>什么？看不懂？这里有一个简单版的~~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">typename</span><span class="comment">/*你要定义的类型名*/</span>,<span class="built_in">vector</span>&lt;<span class="keyword">typename</span>/*同上*/&gt; q;</span><br></pre></td></tr></table></figure><p>默认是小根堆，如果想要大根堆怎么办?那就改成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">typename</span><span class="comment">/*你要定义的类型名*/</span>,<span class="built_in">vector</span>&lt;<span class="keyword">typename</span>/*同上*/,greater&lt;<span class="keyword">typename</span>/*依然同上*/&gt; &gt; q;</span><br></pre></td></tr></table></figure><p>啥？你自己写的结构体/类？那就重载&lt;号就行了！</p><p>还有几个比较常用的操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.push(x)<span class="comment">//把x放入队中</span></span><br><span class="line">q.pop()<span class="comment">//把队头删除出</span></span><br><span class="line">x=q.top()<span class="comment">//取出队头的值（不会删掉）</span></span><br><span class="line">l=q.size()<span class="comment">//获得队列中元素数量</span></span><br></pre></td></tr></table></figure><p>好，讲正事：堆咋搞？</p><p>我们以小根堆为例，首先要知道的是，堆是一棵完全二叉树，像这样</p><p><img src="/Heap/duiliz.png" alt="堆的例子"></p><p>可以看出规律：</p><blockquote><p>A[i]&lt;=A[i<em>2], A[i]&lt;=A[i</em>2+1]</p></blockquote><p>堆基本支持以下几种操作（其实我合并了一下，想了解完整的点<a href="https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)" target="_blank" rel="noopener">这里</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push(k)</span><br><span class="line">pop()</span><br><span class="line">top()</span><br></pre></td></tr></table></figure><p>首先，我们先把该定义的给它定义了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tree[<span class="number">1000000</span>],len;<span class="comment">//heap数组作为储存树用，len则指向最后一个元素</span></span><br></pre></td></tr></table></figure><p>然后我们一个个实现这些操作。</p><font color="#66ccff" size="4">push(k)</font><p>我们先把k放入堆尾，不管它有没有序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap[++len]=k;</span><br></pre></td></tr></table></figure><p>然后我们需要一些操作来维持它的性质。定义指针now和next分别指向堆尾和堆尾的父节点，也就是now/2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> now=len,next=now/<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>然后呢，我们用一个while循环直到now到顶（==1）或者我们在中途打断它为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (now)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[now] &lt; tree[next])<span class="comment">//判断是否符合性质</span></span><br><span class="line">        swap(tree[now], tree[next]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//如果没有交换，根据性质，该堆已经符合了性质，就可以退了</span></span><br><span class="line">    now = next, next = now / <span class="number">2</span>;<span class="comment">//寻找下一个结点和其父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>push(k)就完成了。</p><font color="#66ccff" size="4">pop()</font><p>先把堆顶结点删掉。这个就有很多办法了。我选择把堆顶和堆尾交换然后len–。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swap(tree[<span class="number">1</span>], tree[len]);</span><br><span class="line">len--;</span><br></pre></td></tr></table></figure><p>然后依然建立指针now和next，不过这次的now指向堆顶，next指向他的左子结点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>, next = now * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>还是使用while循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (next &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (next &lt; len &amp;&amp; tree[next] &gt; tree[next + <span class="number">1</span>])<span class="comment">//找出较小的子结点</span></span><br><span class="line">        next++;</span><br><span class="line">    <span class="keyword">if</span> (tree[now] &gt; tree[next])<span class="comment">//注意大于号和小于号，push是从下至上而pop是从上至下所以应该反过来。</span></span><br><span class="line">        swap(tree[now], tree[next]);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//同上</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    now = next, next = now * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="#66ccff" size="4">top()</font><p>这个没什么好讲，直接把堆顶拿了就是了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> tree[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>好了，放完整代码。（我还加了几个额外功能）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tree[Max];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::push(<span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">    tree[++len] = k;</span><br><span class="line">    <span class="keyword">int</span> now = len, next = len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (now)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[now] &lt; tree[next])</span><br><span class="line">            swap(tree[now], tree[next]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        now = next, next = now / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::pop()</span><br><span class="line">&#123;</span><br><span class="line">    swap(tree[<span class="number">1</span>], tree[len]);</span><br><span class="line">    len--;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>, next = now * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (next &lt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; len &amp;&amp; tree[next] &gt; tree[next + <span class="number">1</span>])</span><br><span class="line">            next++;</span><br><span class="line">        <span class="keyword">if</span> (tree[now] &gt; tree[next])</span><br><span class="line">            swap(tree[now], tree[next]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        now = next, next = now * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree[len + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::top()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Heap::clear()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span> tree);</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::size()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"></span><br><span class="line">Heap heap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font size="3">参考资料：</font><br><font size="3"><a href="https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84</a>)</font><font size="3"><a href="https://baike.baidu.com/item/最小堆/9139372?fromtitle=小根堆&amp;fromid=4633461&amp;fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/最小堆/9139372?fromtitle=小根堆&amp;fromid=4633461&amp;fr=aladdin</a></font><p>模板题点<a href="https://www.luogu.org/problemnew/show/P3378" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font color=&quot;#66ccff&quot; size=&quot;6&quot;&gt;堆&lt;/font&gt;

&lt;p&gt;好，今天来讲堆。&lt;/p&gt;
&lt;p&gt;先讲一个十分偷懒的方法：STL中的容器：priority_queue（优先队列）&lt;/p&gt;
&lt;p&gt;首先要先包含库,priority_queue包含于queue中：
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网络流：入门篇</title>
    <link href="https://www.jeb.website/details/2018/08-24-WanLuoLiurm.html"/>
    <id>https://www.jeb.website/details/2018/08-24-WanLuoLiurm.html</id>
    <published>2018-08-24T10:16:17.826Z</published>
    <updated>2018-08-24T10:16:17.826Z</updated>
    
    <content type="html"><![CDATA[<p>（<del>也不知道会不会有进阶篇</del>）</p><font color="#66ccff" size="6">Part1 最大流</font><p>   okok，我们先来讲一下什么叫网络流<br>   这里有一幅图</p><p><img src="/WanLuoLiurm/wlz.png" alt="网络流的例子"></p><p>  每一个边都有一个流量，我们叫它V<br>  把它想象成一个自来水厂和你家之间的供水线路，有一个原点s(自来水厂)和一个汇点t(你家)。问你家在一个单位时间内最大可以有多少水用。</p><p>  很明显，水的多少取决于最小的边的流量。在这张图中，你家最多可以有7+4=13的水。</p><p>  那么算法的关键就是如何找出最小的边并拓展。</p><p>  祭出大法：EK(EdmondsKarp)增广路算法！</p><p>  先看下定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,next;</span><br><span class="line">&#125;node[Max];<span class="comment">//记录边，y为尾，v为该边流量，next为下一条同首的边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line">&#125;pre[Max];<span class="comment">//记录当前增广路的边，x为首，i为尾。</span></span><br><span class="line"><span class="keyword">bool</span> pd[Max];<span class="comment">//判断是否在队中</span></span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m;<span class="comment">//len是用于记录边的，last当前是以x为首的最后一条边。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span>;<span class="comment">//寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;<span class="comment">//建边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span></span>;<span class="comment">//循环计数</span></span><br></pre></td></tr></table></figure><p>  该算法使用一个张扬而不做作的广搜，拓展所有以que.front()为开头的边(初始化时，s入队)，当判断它没有被记录时，记录。当当前拓展的边就是t时,返回1。当队列为空时，说明所有的边以及拓展完毕，没有找到t，就是没有从s-&gt;t的边，返回0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(pd,<span class="number">0</span>,<span class="keyword">sizeof</span> pd);</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line">pd[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)<span class="comment">//寻找以x为首的边（或者说x可以拓展的边）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (!pd[y]&amp;&amp;node[i].v)<span class="comment">//如果当前边没有被记录过并且还有空间可以流水</span></span><br><span class="line">&#123;</span><br><span class="line">pd[y]=<span class="number">1</span>;<span class="comment">//打上标记，表示被记录</span></span><br><span class="line">pre[y].x=x;<span class="comment">//记录边</span></span><br><span class="line">pre[y].i=i;<span class="comment">//同上</span></span><br><span class="line">que.push(y);<span class="comment">//入队</span></span><br><span class="line"><span class="keyword">if</span> (y==t)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  再使用一个低调奢华有内涵的循环。当当前还存在增广路的话，循环遍历寻找增广路上最小的值，再循环遍历剪掉。此时，最大流加上当前的最小的值。</p><p>  当广搜返回0时，说明没有增广路了，当前已累计最大流。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (find())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">minn=min(minn,node[pre[i].i].v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">node[pre[i].i].v-=minn,node[pre[i].i^<span class="number">1</span>].v+=minn;<span class="comment">//要注意，len要从一个奇数开始，这样把当前的编号^1就是其反向边的编号;我喜欢用1.你用其他的话你自己修改。</span></span><br><span class="line">ans+=minn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure><p>什么？你想要完整版？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkFlows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,next;</span><br><span class="line">&#125;node[Max];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line">&#125;pre[Max];</span><br><span class="line"><span class="keyword">bool</span> pd[Max];</span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::build(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">node[len].y=y,node[len].v=v,node[len].next=last[x],last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span> node);</span><br><span class="line"><span class="keyword">int</span> x,y,d;</span><br><span class="line">len=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;d,build(x,y,d),build(y,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> NetworkFlows::find()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(pd,<span class="number">0</span>,<span class="keyword">sizeof</span> pd);</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line">pd[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (!pd[y]&amp;&amp;node[i].v)</span><br><span class="line">&#123;</span><br><span class="line">pd[y]=<span class="number">1</span>;</span><br><span class="line">pre[y].x=x;</span><br><span class="line">pre[y].i=i;</span><br><span class="line">que.push(y);</span><br><span class="line"><span class="keyword">if</span> (y==t)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NetworkFlows::EK()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (find())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">minn=min(minn,node[pre[i].i].v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">node[pre[i].i].v-=minn,node[pre[i].i^<span class="number">1</span>].v+=minn;</span><br><span class="line">ans+=minn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NetworkFlows f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f.init();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f.EK()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咯！<br>需要特别注意的是，要加上反向边！！！拓展到反向边时，要加上当前最小的值<br>你问我为什么？<br>我怎么知道！ (╯≥▽≤)╯~ ┴—┴</p><p>咳咳，其实这样才可以有后悔的机会嘛。</p><font color="#66ccff" size="6">Part2 最小费用最大流</font><p>先看一下最小费用是啥</p><p><img src="/WanLuoLiurm/sbl.png" alt="最小费用最大流"></p><p>我们在流量v的基础上又加了一个花费w，我们要求的是最大流中的最小花费</p><p>说到最小费用先想到什么呢？最短路！所以我们可以用一个最短路算法（也就是说把原来的广搜换成最短路并记录路径）（我喜欢用spfa<del>毕竟我不会其他的</del>）来求出一条s-&gt;t花费最小的边并累加费用和流量就ok了！</p><p>要注意，我们要在加反向边且v为0的基础上，同时设反向边的w为-w，这样我们便有后悔的机会。</p><p>放出代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkFlows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,w,next;</span><br><span class="line">&#125;node[Max];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line">&#125;pre[Max];</span><br><span class="line"><span class="keyword">bool</span> pd[Max];</span><br><span class="line"><span class="keyword">int</span> spfa[Max];</span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m,mf,co;<span class="comment">//co是花费</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EK</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::build(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">node[len].y=y,node[len].v=v,node[len].w=w,node[len].next=last[x],last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span> node);</span><br><span class="line"><span class="keyword">int</span> x,y,v,w;</span><br><span class="line">len=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v&gt;&gt;w,build(x,y,v,w),build(y,x,<span class="number">0</span>,-w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> NetworkFlows::find()<span class="comment">//spfa求最短路</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(pd,<span class="number">0</span>,<span class="keyword">sizeof</span> pd);</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">memset</span>(spfa,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> spfa);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line">pd[s]=<span class="number">1</span>;</span><br><span class="line">spfa[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line">pd[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (spfa[y]&gt;spfa[x]+node[i].w&amp;&amp;node[i].v)</span><br><span class="line">&#123;</span><br><span class="line">spfa[y]=spfa[x]+node[i].w;</span><br><span class="line">pre[y].i=i,pre[y].x=x;</span><br><span class="line"><span class="keyword">if</span> (!pd[y])</span><br><span class="line">pd[y]=<span class="number">1</span>,que.push(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> spfa[t]!=<span class="number">0x3f3f3f3f</span>;<span class="comment">//是否有s-&gt;t的路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mf&lt;&lt;<span class="string">' '</span>&lt;&lt;co&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::EK()</span><br><span class="line">&#123;</span><br><span class="line">mf=<span class="number">0</span>,co=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (find())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">minn=min(minn,node[pre[i].i].v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">node[pre[i].i].v-=minn,node[pre[i].i^<span class="number">1</span>].v+=minn;</span><br><span class="line">mf+=minn;</span><br><span class="line">co+=minn*spfa[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NetworkFlows f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f.init();</span><br><span class="line">f.EK();</span><br><span class="line">f.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（&lt;del&gt;也不知道会不会有进阶篇&lt;/del&gt;）&lt;/p&gt;
&lt;font color=&quot;#66ccff&quot; size=&quot;6&quot;&gt;Part1 最大流&lt;/font&gt;

&lt;p&gt;   okok，我们先来讲一下什么叫网络流&lt;br&gt;   这里有一幅图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Wan
      
    
    </summary>
    
    
  </entry>
  
</feed>
