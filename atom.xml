<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeb&#39;s BLOG</title>
  
  <subtitle>论一只蒟蒻的自我修养。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeb.website/"/>
  <updated>2018-08-31T10:20:43.850Z</updated>
  <id>https://jeb.website/</id>
  
  <author>
    <name>Jeb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并查集</title>
    <link href="https://jeb.website/details/2018/08-31-UnionCheck.html"/>
    <id>https://jeb.website/details/2018/08-31-UnionCheck.html</id>
    <published>2018-08-31T00:16:33.000Z</published>
    <updated>2018-08-31T10:20:43.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>并查集是一种高级数据结构。</p><p>先来看看维基怎么说：</p><blockquote><p>在计算机科学中，并查集是一种树型的数据结构，用于处理一些不交集（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个用于此数据结构的操作：<br>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。<br>Union：将两个子集合并成同一个集合。<br>由于支持这两种操作，一个不相交集也常被称为联合-查找数据结构（union-find data structure）或合并-查找集合（merge-find set）。其他的重要方法，MakeSet，用于建立单元素集合。有了这些方法，许多经典的划分问题可以被解决。<br>为了更加精确的定义这些方法，需要定义如何表示集合。一种常用的策略是为每个集合选定一个固定的元素，称为代表，以表示整个集合。接着，Find(x) 返回 x 所属集合的代表，而 Union 使用两个集合的代表作为参数。<br>时间复杂度:<br>同时使用路径压缩、按秩（rank）合并优化的程序每个操作的平均时间仅为 <script type="math/tex">{\displaystyle O(\alpha (n))}</script>，其中 <script type="math/tex">{\displaystyle \alpha (n)}</script> 是 <script type="math/tex">{\displaystyle n=f(x)=A(x,x)}</script> 的反函数， <script type="math/tex">{\displaystyle A}</script> 是急速增加的阿克曼函数。因为 <script type="math/tex">{\displaystyle \alpha (n)}</script> 是其反函数，故 <script type="math/tex">{\displaystyle \alpha (n)}</script> 在 <script type="math/tex">{\displaystyle n}</script> 十分巨大时还是小于 5。因此，平均运行时间是一个极小的常数。实际上，这是渐近最优算法：Fredman 和 Saks 在 1989 年解释了 <script type="math/tex">{\displaystyle \Omega (\alpha (n))}</script> 的平均时间内可以获得任何并查集。<br>空间复杂度:</p><p><script type="math/tex">{\displaystyle O(n)}</script>（n 为元素数量）<br>（<a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86" target="_blank" rel="noopener">传送门</a>）</p></blockquote><p><del>是不是贼高大上？</del></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p>我们要先把fa数组初始化为下标（假设自己单独为一棵树）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        fa[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><p>我们对于每对点执行Add操作，建立联系</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx=GetRoot(x),fy=GetRoot(y);<span class="comment">//得到该树的Root</span></span><br><span class="line"><span class="keyword">if</span> (fx!=fy)<span class="comment">//不同根说明没有在同一课树上</span></span><br><span class="line">fa[fx]=fy;<span class="comment">//合并两棵树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GetRoot"><a href="#GetRoot" class="headerlink" title="GetRoot"></a>GetRoot</h3><p>对于每个点，我们需要一个GetRoot操作，向上查询得到它的祖宗。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRoot</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fa[k]!=k)<span class="comment">//祖宗是自己的话，说明它是一棵树的root</span></span><br><span class="line">fa[k]=find(fa[k]);<span class="comment">//路径合并，记录祖宗</span></span><br><span class="line"><span class="keyword">return</span> fa[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><p>查询两点是否在同一棵树上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> GetRoot(x)==GetRoot(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不贴完整的源码了<del>懒</del></p><h2 id="参考-amp-模板题"><a href="#参考-amp-模板题" class="headerlink" title="参考&amp;模板题"></a>参考&amp;模板题</h2><p>参考：<br><a href="https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%B9%B6%E6%9F%A5%E9%9B%86</a> （想学习更快的可以去看看）</p><p>模板题：<a href="https://www.luogu.org/problemnew/show/P3367" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;并查集是一种高级数据结构。&lt;/p&gt;
&lt;p&gt;先来看看维基怎么说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，并查集是一种树型的数
      
    
    </summary>
    
    
      <category term="高级数据结构" scheme="https://jeb.website/tags/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="并查集" scheme="https://jeb.website/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="https://jeb.website/details/2018/08-30-ZuiXiaoShengChengShu.html"/>
    <id>https://jeb.website/details/2018/08-30-ZuiXiaoShengChengShu.html</id>
    <published>2018-08-30T14:26:46.000Z</published>
    <updated>2018-08-31T12:44:09.116Z</updated>
    
    <content type="html"><![CDATA[<p><del>高产一波</del></p><p>我们来讲讲最小生成树。</p><h2 id="什么是最小生成树"><a href="#什么是最小生成树" class="headerlink" title="什么是最小生成树"></a>什么是最小生成树</h2><p>先了解以下什么是“最小生成树”<del>日常维基</del></p><blockquote><p>最小生成树是一副连通加权无向图中一棵权值最小的生成树。<br>在一给定的无向图 G = (V, E) 中，(u, v) 代表连接顶点 u 与顶点 v 的边，即 <script type="math/tex">{\displaystyle (u,v)\in E}</script>，而 w(u, v) 代表此边的权重，若存在 T 为 E 的子集，即 <script type="math/tex">{\displaystyle T\subseteq E}</script>且 (V, T) 为树，使得</p><script type="math/tex; mode=display">{\displaystyle w(T)=\sum _{(u,v)\in T}w(u,v)} w(T)=\sum _{(u,v)\in T}w(u,v)</script><p>的 w(T) 最小，则此 T 为 G 的最小生成树。<br>最小生成树其实是最小权重生成树的简称。<br>一个连通图可能有多个生成树。当图中的边具有权值时，总会有一个生成树的边的权值之和小于或者等于其它生成树的边的权值之和。广义上而言，对于非连通无向图来说，它的每一连通分量同样有最小生成树，它们的并被称为最小生成森林。<br>以有线电视电缆的架设为例，若只能沿着街道布线，则以街道为边，而路口为顶点，其中必然有一最小生成树能使布线成本最低。(来自<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91" target="_blank" rel="noopener">这里</a>）</p></blockquote><p>看不懂对不对？<del>我也是</del></p><p>但是，要是题目中有诸如“连接”啊之类的，就是它了。</p><p>目前我们有两种常用的求解最小生成树的算法：Kruskal和Prim <del>毕竟其它的我都不会</del>。在稀疏图中，Kruskal占优；而在稠密图之中，Prim占优。所以说，Kruskal一般用于稀疏图，所以用邻接表实现；而Prim常用于稠密图，所以一般采用邻接矩阵实现<del>你偏要用邻接矩阵实现Kruskal用邻接表实现Prim谁也拦不住你</del></p><h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><p>我们先来看看Kruskal</p><p><del>抄维基</del></p><blockquote><p>Kruskal算法是一种用来查找最小生成树的算法，由Joseph Kruskal在1956年发表。用来解决同样问题的还有Prim算法和Boruvka算法等。三种算法都是贪心算法的应用。和Boruvka算法不同的地方是，Kruskal算法在图中存在相同权值的边时也有效。平均时间复杂度为 <script type="math/tex">{\displaystyle \mathrm {O} (|E|\log |V|)}</script>，其中 <script type="math/tex">{\displaystyle E}</script> 和 <script type="math/tex">{\displaystyle V}</script> 分别是图的边集和点集。(<a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E9%B2%81%E6%96%AF%E5%85%8B%E5%B0%94%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">传送门</a>)</p></blockquote><p>Kruskal算法基于贪心和并查集，并使用它判断是否连接（或者说是否同根）。如果不同根，则加入该节点（我们默认认为它是有序的）。</p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>并查集可以看<a href="https://www.jeb.website/details/2018/08-31-UnionCheck.html">这里</a>。</p><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p>Kruskal采用贪心策略，先让边的权值从小到大排序，保证取出来的是当前剩余边的最小值。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p><img src="/img/sxbcjhx.png" alt="实现Kruskal"></p><p>其实核心代码就这一点点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (find(node[i].x)!=fy=find(node[i].y))<span class="comment">//不在同一棵树中，但是它们是连在一起的，就合并两棵树</span></span><br><span class="line">&#123;</span><br><span class="line">fa[fa[fx]]=fa[fy],ans+=node[i].v;<span class="comment">//合并，因为已经排好序。当前取出来的一定比其它可行路径短，于是累加它们的权值。</span></span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (t==n<span class="number">-1</span>)<span class="comment">//由最小生成树的性质，边数不超过点数-1</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;v&lt;x.v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;node[<span class="number">1100000</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,fa[<span class="number">1100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Kruskal::<span class="built_in">set</span>(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Kruskal::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">fa[i]=i;</span><br><span class="line">sort(node+<span class="number">1</span>,node+m+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Kruskal::find(<span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fa[k]!=k)</span><br><span class="line">fa[k]=find(fa[k]);</span><br><span class="line"><span class="keyword">return</span> fa[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Kruskal::build(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">m++;</span><br><span class="line">node[m]=Node&#123;x,y,v&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Kruskal::get()</span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (find(node[i].x)!=fy=find(node[i].y))</span><br><span class="line">    &#123;</span><br><span class="line">    fa[fa[fx]]=fa[fy],ans+=node[i].v;</span><br><span class="line">    t++;</span><br><span class="line">    <span class="keyword">if</span> (t==n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">Kruskal kl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h2><blockquote><p>普里姆算法（Prim算法），图论中的一种算法，可在加权连通图里搜索最小生成树。意即由此算法搜索到的边子集所构成的树中，不但包括了连通图里的所有顶点，且其所有边的权值之和亦为最小。该算法于1930年由捷克数学家沃伊捷赫·亚尔尼克发现；并在1957年由美国计算机科学家罗伯特·普里姆独立发现；1959年，艾兹格·迪科斯彻再次发现了该算法。因此，在某些场合，普里姆算法又被称为DJP算法、亚尔尼克算法或普里姆－亚尔尼克算法。<br>通过邻接矩阵图表示的简易实现中，找到所有最小权边共需 <script type="math/tex">{\displaystyle O(|V|^{2})}</script> 的运行时间。使用简单的二叉堆与邻接表来表示的话，普里姆算法的运行时间则可缩减为 <script type="math/tex">{\displaystyle O(|E|\log |V|)}</script> ，其中 <script type="math/tex">{\displaystyle |E|}</script> 为连通图的边集大小， <script type="math/tex">{\displaystyle |V|}</script> 为点集大小。如果使用较为复杂的斐波那契堆，则可将运行时间进一步缩短为 <script type="math/tex">{\displaystyle O(|E|+|V|\log |V|)}</script> ，这在连通图足够密集时（当 <script type="math/tex">{\displaystyle |E|}</script> 满足 <script type="math/tex">{\displaystyle \Omega (|V|\log |V|)}</script> 条件时），可较显著地提高运行速度。</p></blockquote><p><del>但是我不会堆优化</del></p><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(k1,<span class="number">0</span>,<span class="keyword">sizeof</span> k1);</span><br><span class="line"><span class="built_in">memset</span>(k2,<span class="number">0</span>,<span class="keyword">sizeof</span> k2);</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> edge);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y,c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;c,edge[x][y]=edge[y][x]=min(edge[x][y],c);<span class="comment">//读入并储存到邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    k2[i]=edge[<span class="number">1</span>][i];<span class="comment">//记录当前可和1连接的边的权值</span></span><br><span class="line">k1[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//标记是否走过该点</span></span><br></pre></td></tr></table></figure><h3 id="GetAns"><a href="#GetAns" class="headerlink" title="GetAns"></a>GetAns</h3><p>重头戏来了。</p><p>其实Prim也是基于贪心思想，每次我们需要找到边权最小的边并不断拓展。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,k=<span class="number">1</span>;<span class="comment">//ans记录答案，k记录走的次数</span></span><br><span class="line"><span class="keyword">while</span> (k&lt;n)<span class="comment">//同上文t作用一样，由最小生成树的性质，边数不超过点数-1</span></span><br><span class="line">&#123;</span><br><span class="line">    k++;</span><br><span class="line">    <span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//循环查找没有被选中过（拓展过）而且边权最小的边（贪心）</span></span><br><span class="line">        <span class="keyword">if</span> (!k1[i]&amp;&amp;k2[i]&lt;minn)</span><br><span class="line">            minn=k2[i],p=i;</span><br><span class="line">    ans+=minn;<span class="comment">//累计最小的边权</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span> (!k1[i]&amp;&amp;k2[i]&gt;edge[p][i])<span class="comment">//记录当前最优解的边权</span></span><br><span class="line">            k2[i]=edge[p][i];</span><br><span class="line">    k1[p]=<span class="number">1</span>;<span class="comment">//记录走过的边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整源代码"><a href="#完整源代码" class="headerlink" title="完整源代码"></a>完整源代码</h3><p>其实也就这么多，都挺简单的<del>才怪</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1200</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prim</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> edge[Max][Max],n,m,k2[Max];</span><br><span class="line">    <span class="keyword">bool</span> k1[Max];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">GetAns</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Prim::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(k1,<span class="number">0</span>,<span class="keyword">sizeof</span> k1);</span><br><span class="line">    <span class="built_in">memset</span>(k2,<span class="number">0</span>,<span class="keyword">sizeof</span> k2);</span><br><span class="line">    <span class="built_in">memset</span>(edge,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> edge);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> x,y,c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;c,edge[x][y]=edge[y][x]=min(edge[x][y],c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        k2[i]=edge[<span class="number">1</span>][i];</span><br><span class="line">    k1[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Prim::GetAns()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>,p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (!k1[i]&amp;&amp;k2[i]&lt;minn)</span><br><span class="line">                minn=k2[i],p=i;</span><br><span class="line">        ans+=minn;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (!k1[i]&amp;&amp;k2[i]&gt;edge[p][i])</span><br><span class="line">                k2[i]=edge[p][i];</span><br><span class="line">        k1[p]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Prim prim;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prim.init();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;prim.GetAns();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料-amp-模板题"><a href="#参考资料-amp-模板题" class="headerlink" title="参考资料&amp;模板题"></a>参考资料&amp;模板题</h2><p>参考资料：<br><a href="https://zh.wikipedia.org/wiki/%E6%99%AE%E6%9E%97%E5%A7%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%99%AE%E6%9E%97%E5%A7%86%E7%AE%97%E6%B3%95</a><br><a href="https://zh.wikipedia.org/wiki/%E5%85%8B%E9%B2%81%E6%96%AF%E5%85%8B%E5%B0%94%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%85%8B%E9%B2%81%E6%96%AF%E5%85%8B%E5%B0%94%E6%BC%94%E7%AE%97%E6%B3%95</a><br><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91</a></p><p>模板题点<a href="https://www.luogu.org/problemnew/show/P3366" target="_blank" rel="noopener">这里</a><del>对Prim十分不友好</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;高产一波&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;我们来讲讲最小生成树。&lt;/p&gt;
&lt;h2 id=&quot;什么是最小生成树&quot;&gt;&lt;a href=&quot;#什么是最小生成树&quot; class=&quot;headerlink&quot; title=&quot;什么是最小生成树&quot;&gt;&lt;/a&gt;什么是最小生成树&lt;/h2&gt;&lt;p&gt;先了解以
      
    
    </summary>
    
    
      <category term="图论" scheme="https://jeb.website/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="并查集" scheme="https://jeb.website/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="最小生成树" scheme="https://jeb.website/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Kruskal" scheme="https://jeb.website/tags/Kruskal/"/>
    
      <category term="Prim" scheme="https://jeb.website/tags/Prim/"/>
    
  </entry>
  
  <entry>
    <title>单源点最短路径(下)</title>
    <link href="https://jeb.website/details/2018/08-30-DanYuanDianZuiDuanLuJingX.html"/>
    <id>https://jeb.website/details/2018/08-30-DanYuanDianZuiDuanLuJingX.html</id>
    <published>2018-08-30T12:26:52.000Z</published>
    <updated>2018-08-30T13:08:26.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引语"><a href="#引语" class="headerlink" title="引语"></a>引语</h2><p>之前我们讲过单源点最短路径的上并介绍了一种高效易懂的算法-SPFA。但是，如果是稠密图，该算法的时间复杂度会急剧攀升，达到O(VE)。所以说，在不需要判负环的情况下，我们可以使用一种更加优异的算法-Dijkstra（戴克斯特拉算法）</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>先看看wikipedia是怎么说的。</p><blockquote><p>戴克斯特拉算法（英语：Dijkstra’s algorithm，又译迪杰斯特拉算法）由荷兰计算机科学家艾兹赫尔·戴克斯特拉在1956年提出。戴克斯特拉算法使用了广度优先搜索解决赋权有向图的单源最短路径问题。该算法存在很多变体；戴克斯特拉的原始版本找到两个顶点之间的最短路径，但是更常见的变体固定了一个顶点作为源节点然后找到该顶点到图中所有其它节点的最短路径，产生一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。举例来说，如果图中的顶点表示城市，而边上的权重表示城市间开车行经的距离，该算法可以用来找到两个城市之间的最短路径。<br>该算法的输入包含了一个有权重的有向图 G，以及G中的一个来源顶点 S。我们以 V 表示 G 中所有顶点的集合。每一个图中的边，都是两个顶点所形成的有序元素对。(u, v) 表示从顶点 u 到 v 有路径相连。我们以 E 表示G中所有边的集合，而边的权重则由权重函数 w: E → [0, ∞] 定义。因此，w(u, v) 就是从顶点 u 到顶点 v 的非负权重（weight）。边的权重可以想像成两个顶点之间的距离。任两点间路径的权重，就是该路径上所有边的权重总和。已知 V 中有顶点 s 及 t，Dijkstra 算法可以找到 s 到 t 的最低权重路径(例如，最短路径)。这个算法也可以在一个图中，找到从一个顶点 s 到任何其他顶点的最短路径。<br>最初的戴克斯特拉算法不采用最小优先级队列，时间复杂度是O(|V|^2)(其中|V|为图的顶点个数)。通过斐波那契堆实现的戴克斯特拉算法时间复杂度是O(|E|+|V|log|V|) (其中|E|是边数) （Fredman &amp; Tarjan 1984）。对于不含负权的有向图，这是目前已知的最快的单源最短路径算法。(摘自维基百科，<a href="https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">传送门</a>）</p></blockquote><p><del>Dijkstra不知道比SPFA高到哪里去了。</del></p><p>简单地说：Dijkstra采用优先队列/堆优化，每次取出来的边是最短的，大大减少了需要松弛的边的数量。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>其实Dijkstra在表面上和SPFA是差不多的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> last[Max1],len,ans[Max1];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> y,d,next;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span>//用于保存优先队列中的边</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x,d;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> edge &amp;k) <span class="keyword">const</span></span><br><span class="line">        &#123;<span class="keyword">return</span> d&gt;k.d;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node node[Max2];</span><br><span class="line">    priority_queue&lt;edge,<span class="built_in">vector</span>&lt;edge&gt; &gt; que;<span class="comment">//优先队列，使每次取出来的边最小。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Make</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Scan</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们来一个个实现。</p><h3 id="Make，Add，Scan"><a href="#Make，Add，Scan" class="headerlink" title="Make，Add，Scan"></a>Make，Add，Scan</h3><p>没什么好讲的，放代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Dijkstra::Make(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    len++;</span><br><span class="line">    node[len].y=y;</span><br><span class="line">    node[len].d=d;</span><br><span class="line">    node[len].next=last[x];</span><br><span class="line">    last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Dijkstra::Add(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    Make(x,y,d);</span><br><span class="line">    Make(y,x,d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Dijkstra::Scan(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,d;</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;d;</span><br><span class="line">        Add(x,y,d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重点：Calc"><a href="#重点：Calc" class="headerlink" title="重点：Calc"></a>重点：Calc</h3><p>来来来，划重点<del>要考</del></p><p>看看伪代码（还是来自维基百科）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Dijkstra(G, w, s)</span><br><span class="line">    for each vertex v in V[G]        // 初始化</span><br><span class="line">        d[v] := infinity           // 将各点的已知最短距离先设成无穷大</span><br><span class="line">           previous[v] := undefined   // 各点的已知最短路径上的前趋都未知</span><br><span class="line">    d[s] := 0         //因为出发点到出发点间不需移动任何距离，所以可以直接将s到s的最小距离设为0 </span><br><span class="line">    S := empty set</span><br><span class="line">    Q := set of all vertices</span><br><span class="line">    while Q is not an empty set      // Dijkstra算法主体</span><br><span class="line">        u := Extract_Min(Q)</span><br><span class="line">        S.append(u)</span><br><span class="line">        for each edge outgoing from u as (u,v)</span><br><span class="line">            if d[v] &gt; d[u] + w(u,v)             // 拓展边（u,v）。w(u,v)为从u到v的路径长度。</span><br><span class="line">                d[v] := d[u] + w(u,v)         // 更新路径长度到更小的那个和值。</span><br><span class="line">                previous[v] := u              // 纪录前趋顶点</span><br></pre></td></tr></table></figure><p>我们先把dist和优先队列初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> ans);<span class="comment">//清空ans，全部设为无穷大</span></span><br><span class="line">ans[x]=<span class="number">0</span>;<span class="comment">//源点到源点的长度为0</span></span><br><span class="line"><span class="keyword">while</span> (que.size())<span class="comment">//清空que（没有.clear()太不人性化了）</span></span><br><span class="line">    que.pop();</span><br><span class="line">que.push(edge&#123;x,<span class="number">0</span>&#125;);<span class="comment">//加入源点且边权为0</span></span><br></pre></td></tr></table></figure><p>然后求最短路</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (que.size())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> kx=que.top().x,ld=que.top().d;</span><br><span class="line">    que.pop();</span><br><span class="line">    <span class="keyword">if</span> (ld!=ans[kx])<span class="comment">//如果入队时的大小不等于现在的大小，说明已经被更新过了，当前的点无法更新。</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[i].next)<span class="comment">//遍历所有可从该点走到的点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ky=node[i].y,kd=node[i].d;</span><br><span class="line">        <span class="keyword">if</span> (ans[ky]&gt;ans[kx]+kd)<span class="comment">//判断是否更优</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[ky]=ans[kx]+kd;</span><br><span class="line">            que.push(edge&#123;ky,ans[ky]&#125;);<span class="comment">//入队，记得带上当前的边权，注意是当前的！</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么完整的Calc函数已经呼之欲出了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Dijkstra::Calc(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">    ans[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (que.size())</span><br><span class="line">        que.pop();</span><br><span class="line">    que.push(edge&#123;x,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (que.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> kx=que.top().x,ld=que.top().d;</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (ld!=ans[kx])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ky=node[i].y,kd=node[i].d;</span><br><span class="line">            <span class="keyword">if</span> (ans[ky]&gt;ans[kx]+kd)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[ky]=ans[kx]+kd;</span><br><span class="line">                que.push(edge&#123;ky,ans[ky]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[y]==<span class="number">0x7f7f7f7f</span>?<span class="number">-1</span>:ans[y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max1 3000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max2 3000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> last[Max1],len,ans[Max1];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> y,d,next;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x,d;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> edge &amp;k) <span class="keyword">const</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Node node[Max2];</span><br><span class="line">    priority_queue&lt;edge,<span class="built_in">vector</span>&lt;edge&gt; &gt; que;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Make</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Scan</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Dijkstra::edge::<span class="keyword">operator</span>&lt; (<span class="keyword">const</span> edge &amp;k) <span class="keyword">const</span> &#123;<span class="keyword">return</span> d&gt;k.d;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Dijkstra::Make(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    len++;</span><br><span class="line">    node[len].y=y;</span><br><span class="line">    node[len].d=d;</span><br><span class="line">    node[len].next=last[x];</span><br><span class="line">    last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Dijkstra::Add(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    Make(x,y,d);</span><br><span class="line">    Make(y,x,d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Dijkstra::Scan(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,d;</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;d;</span><br><span class="line">        Add(x,y,d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Dijkstra::Calc(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">    ans[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (que.size())</span><br><span class="line">        que.pop();</span><br><span class="line">    que.push(edge&#123;x,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (que.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> kx=que.top().x,ld=que.top().d;</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (ld!=ans[kx])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ky=node[i].y,kd=node[i].d;</span><br><span class="line">            <span class="keyword">if</span> (ans[ky]&gt;ans[kx]+kd)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[ky]=ans[kx]+kd;</span><br><span class="line">                que.push(edge&#123;ky,ans[ky]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[y]==<span class="number">0x7f7f7f7f</span>?<span class="number">-1</span>:ans[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"></span><br><span class="line">Dijkstra dij;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>依然很易于背诵</del></p><h2 id="参考资料，模板题"><a href="#参考资料，模板题" class="headerlink" title="参考资料，模板题"></a>参考资料，模板题</h2><p>参考资料：</p><p><a href="https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&amp;fromid=1101824&amp;fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&amp;fromid=1101824&amp;fr=aladdin</a></p><p><a href="https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95</a></p><p>模板题：<a href="https://www.luogu.org/problemnew/show/P4779" target="_blank" rel="noopener">这里</a> （要注意这个模板题是单向边的<del>我调了好久</del>）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引语&quot;&gt;&lt;a href=&quot;#引语&quot; class=&quot;headerlink&quot; title=&quot;引语&quot;&gt;&lt;/a&gt;引语&lt;/h2&gt;&lt;p&gt;之前我们讲过单源点最短路径的上并介绍了一种高效易懂的算法-SPFA。但是，如果是稠密图，该算法的时间复杂度会急剧攀升，达到O(VE)。所以说
      
    
    </summary>
    
    
      <category term="图论" scheme="https://jeb.website/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路径" scheme="https://jeb.website/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="Dijkstra" scheme="https://jeb.website/tags/Dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>Trie</title>
    <link href="https://jeb.website/details/2018/08-27-Trie.html"/>
    <id>https://jeb.website/details/2018/08-27-Trie.html</id>
    <published>2018-08-27T05:16:41.000Z</published>
    <updated>2018-08-27T14:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来看下Trie字典树（念作tree/try）</p><h2 id="什么是字典树"><a href="#什么是字典树" class="headerlink" title="什么是字典树"></a>什么是字典树</h2><p>先来看看什么是字典树</p><blockquote><p>在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。Trie这个术语来自于retrieval。根据词源学，trie的发明者Edward Fredkin把它读作/ˈtriː/ “tree”。但是，其他作者把它读作/ˈtraɪ/ “try”。在图示中，键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。Trie可以看作是一个确定有限状态自动机，尽管边上的符号一般是隐含在分支的顺序中的。键不需要被显式地保存在节点中。图示中标注出完整的，只是为了演示trie的原理。trie中的键通常是字符串，但也可以是其它的结构。trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。比如，bitwise trie中的键是一串位元，可以用于表示整数或者内存地址。（摘自维基百科。<a href="https://zh.wikipedia.org/wiki/Trie" target="_blank" rel="noopener">传送门</a>）</p></blockquote><p>啰里八说一大堆，总结一下在OI中的用途：以空间换时间，达到优秀的（O(size(str))的时间复杂度来插入和查询字符串<del>其实查什么都是ok的</del></p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>字典树是一棵树，采用单数组实现时，我们需要以下声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> tree[Max][<span class="number">27</span>], len, mark[Max];</span><br><span class="line">    <span class="comment">//tree诉诸用于储存跳转表，len为指向最后一个数组下标的指针，mark标记单词结束</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> s)</span></span>;<span class="comment">//插入一个字符串s</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s)</span></span>;<span class="comment">//查询一个字符串s</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那我们来一步步实现。</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>字典树一般用跳转表实现。我们用一个二维数组，第一维储存序号，第二维储存跳转到的序号</p><p><img src="/img/triedt.png" alt="Triedt"></p><p>看一下这张图应该理解了吧？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Trie::add(<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!tree[p][s[i] - <span class="string">'a'</span>])</span><br><span class="line">tree[p][s[i] - <span class="string">'a'</span>] = ++len;</span><br><span class="line">p = tree[p][s[i] - <span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">mark[p]++;<span class="comment">//统计出现次数&amp;记录结尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><p>相当于add操作的小改。</p><p>我们想一下，在拓展字符串的过程中，怎么样导致当前路径没有当前字符串？很显然，有两个地方.</p><p>第一个地方是在添加的过程中。如果跳转表无法跳到下一个跳转表，则没有当前字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!tree[p][s[i] - <span class="string">'a'</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>第二是在标记单词尾的mark数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mark[p])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>综上，我们可以得出以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Trie::query(<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!tree[p][s[i] - <span class="string">'a'</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p = tree[p][s[i] - <span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mark[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> tree[Max][<span class="number">27</span>], len, mark[Max];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Trie::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span> tree);</span><br><span class="line"><span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span> mark);</span><br><span class="line">len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Trie::add(<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!tree[p][s[i] - <span class="string">'a'</span>])</span><br><span class="line">tree[p][s[i] - <span class="string">'a'</span>] = ++len;</span><br><span class="line">p = tree[p][s[i] - <span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">mark[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Trie::query(<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!tree[p][s[i] - <span class="string">'a'</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p = tree[p][s[i] - <span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mark[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"></span><br><span class="line">Trie trie;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很容易<del>背</del>呢？（滑稽）</p><h2 id="参考资料-amp-模板题"><a href="#参考资料-amp-模板题" class="headerlink" title="参考资料&amp;模板题"></a>参考资料&amp;模板题</h2><p>参考资料：<a href="https://zh.wikipedia.org/wiki/Trie" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Trie</a></p><p>模板题：<a href="https://www.luogu.org/problemnew/show/P2580" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来看下Trie字典树（念作tree/try）&lt;/p&gt;
&lt;h2 id=&quot;什么是字典树&quot;&gt;&lt;a href=&quot;#什么是字典树&quot; class=&quot;headerlink&quot; title=&quot;什么是字典树&quot;&gt;&lt;/a&gt;什么是字典树&lt;/h2&gt;&lt;p&gt;先来看看什么是字典树&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
    
      <category term="高级数据结构" scheme="https://jeb.website/tags/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Trie字典树" scheme="https://jeb.website/tags/Trie%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
      <category term="字符串" scheme="https://jeb.website/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="查询" scheme="https://jeb.website/tags/%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="https://jeb.website/details/2018/08-26-XianDuanShu.html"/>
    <id>https://jeb.website/details/2018/08-26-XianDuanShu.html</id>
    <published>2018-08-26T04:36:18.000Z</published>
    <updated>2018-08-27T12:56:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><font size="5">以下权当废话,不要当真！</font><br><br></p><p><font size="6">以下权当废话,不要当真！</font><br><br></p><p><font size="7">以下权当废话,不要当真！</font><br><br></p><p>咳咳。来看看线段树。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>我们先日常地看看什么叫线段树</p><blockquote><p>线段树（英语：Segment tree）是一种二叉树形数据结构，1977年由Jon Louis Bentley发明<a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%AE%B5%E6%A8%B9_(%E5%84%B2%E5%AD%98%E5%8D%80%E9%96%93)" target="_blank" rel="noopener">1</a>，用以储存区间或线段，并且允许快速查询结构内包含某一点的所有区间。<br> 一个包含n个区间的线段树，空间复杂度为 O(nlogn)，查询的时间复杂度则为O(log n+k)，其中k是符合条件的区间数量。<br> 此数据结构亦可推广到高维度。（摘自维基百科，<a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%AE%B5%E6%A8%B9_(%E5%84%B2%E5%AD%98%E5%8D%80%E9%96%93)" target="_blank" rel="noopener">传送门</a>）</p></blockquote><p>简单来说，它是一颗二叉树，基于分治思想，提供符合结合律的操作<del>当然是要你自己写</del></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>我们以查询区间和为例（如果要求区间最值的话要修改lazy_tag云云。为了方便我们把它们封装到一个类里<del>其实介绍懒</del>)，先定义下各种东西。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> val, tag;</span><br><span class="line">&#125; tree[Max];<span class="comment">//储存结点</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ls</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>;<span class="comment">//左子树</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>;<span class="comment">//右子树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUpSum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f)</span></span>;<span class="comment">//更新结点和</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>;<span class="comment">//向下更新结点和，上同</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>;<span class="comment">//建树</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>;<span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;<span class="comment">//修改</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先说明一下：f-&gt;父节点，i-&gt;当前区间左边界，j-&gt;当前区间右边界，l-&gt;左边界，r-&gt;右边界, val-&gt;值，tag-&gt;lazy_tag。</p><p>有几个闭着眼睛都能写出来的函数我先摆出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ST::ls(<span class="keyword">long</span> <span class="keyword">long</span> k) &#123; <span class="keyword">return</span> k &lt;&lt; <span class="number">1</span>; &#125;<span class="comment">//k&lt;&lt;1 == k*2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ST::rs(<span class="keyword">long</span> <span class="keyword">long</span> k) &#123; <span class="keyword">return</span> k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; &#125;<span class="comment">// k&lt;&lt;1|1 == k*2+1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::PushUpSum(<span class="keyword">long</span> <span class="keyword">long</span> f) &#123; tree[f].val = tree[ls(f)].val + tree[rs(f)].val; &#125;<span class="comment">//由子结点上推父节点值</span></span><br></pre></td></tr></table></figure><p>我们分步讲，先将lazy_tag，而后再讲操作。</p><p>常用的操作有三种：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">build()<span class="comment">//建树</span></span><br><span class="line">query()<span class="comment">//查询区间的值</span></span><br><span class="line">updata()<span class="comment">//更新区间</span></span><br></pre></td></tr></table></figure><h3 id="lazy-tag"><a href="#lazy-tag" class="headerlink" title="lazy_tag"></a>lazy_tag</h3><p>线段树的精华在于lazy_tag，它大幅降低了时间复杂度。我们可以把它更新后先放着完成其他操作而后向下更新。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ST::PushDown(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> k)</span><br><span class="line">&#123;</span><br><span class="line">tree[f].val += k * (r - l + <span class="number">1</span>);<span class="comment">//这里相当于k个子结点和，符合加法结合律</span></span><br><span class="line">tree[f].tag += k;<span class="comment">//传递</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::PushDown(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">PushDown(ls(f), l, mid, tree[f].tag);<span class="comment">//更新左子树</span></span><br><span class="line">PushDown(rs(f), mid + <span class="number">1</span>, r, tree[f].tag);<span class="comment">//更新右子树</span></span><br><span class="line">tree[f].tag = <span class="number">0</span>;<span class="comment">//更新lazy_tag</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bulid"><a href="#bulid" class="headerlink" title="bulid()"></a>bulid()</h3><p>因为是树形结构，我们可以自然而然的想到用递归实现，这样会方便许多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ST::build(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span><br><span class="line">&#123;</span><br><span class="line">tree[f].tag = <span class="number">0</span>;<span class="comment">//初始化结点</span></span><br><span class="line"><span class="keyword">if</span> (l == r)<span class="comment">//如果地柜到最后一层则记录并回退</span></span><br><span class="line">&#123;</span><br><span class="line">tree[f].val = a[l];</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">//一定要记得！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">build(ls(f), a, l, mid);<span class="comment">//左子树</span></span><br><span class="line">build(rs(f), a, mid + <span class="number">1</span>, r);<span class="comment">//右子树</span></span><br><span class="line">PushUpSum(f);<span class="comment">//由子结点更新父结点，所以一点要放最后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="query"><a href="#query" class="headerlink" title="query()"></a>query()</h3><p>查询也是用递归实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ST::query(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= l &amp;&amp; j &lt;= r)<span class="comment">//如果在此区间中</span></span><br><span class="line"><span class="keyword">return</span> tree[f].val;</span><br><span class="line">PushDown(f, i, j);<span class="comment">//更新子结点</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (i + j) / <span class="number">2</span>; </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid)<span class="comment">//如果在左区间中，递归查找左子树</span></span><br><span class="line">res += query(ls(f), i, mid, l, r);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)<span class="comment">//如果在右区间中，递归查找右子树</span></span><br><span class="line">res += query(rs(f), mid + <span class="number">1</span>, j, l, r);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="updata"><a href="#updata" class="headerlink" title="updata()"></a>updata()</h3><p>还剩一个updata，其实和query差不多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ST::updata(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> val)<span class="comment">//val是更新的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= l &amp;&amp; j &lt;= r)<span class="comment">//如果当前区间在需要更新的区间中，更新</span></span><br><span class="line">&#123;</span><br><span class="line">tree[f].val += val * (j - i + <span class="number">1</span>);</span><br><span class="line">tree[f].tag += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (i + j) / <span class="number">2</span>;</span><br><span class="line">PushDown(f, i, j);<span class="comment">//更新子结点</span></span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid)<span class="comment">//如果在左区间中，递归更新左子树</span></span><br><span class="line">updata(ls(f), i, mid, l, r, val);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)<span class="comment">//如果在右区间中，递归更新右子树</span></span><br><span class="line">updata(rs(f), mid + <span class="number">1</span>, j, l, r, val);</span><br><span class="line">PushUpSum(f);<span class="comment">//更新父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是<del>很难背</del>很简单呢？<del>（不是）</del></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 500000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> val, tag;</span><br><span class="line">&#125; tree[Max];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ls</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUpSum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ST::ls(<span class="keyword">long</span> <span class="keyword">long</span> k) &#123; <span class="keyword">return</span> k &lt;&lt; <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ST::rs(<span class="keyword">long</span> <span class="keyword">long</span> k) &#123; <span class="keyword">return</span> k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::PushUpSum(<span class="keyword">long</span> <span class="keyword">long</span> f) &#123; tree[f].val = tree[ls(f)].val + tree[rs(f)].val; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::PushDown(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> k)</span><br><span class="line">&#123;</span><br><span class="line">tree[f].val += k * (r - l + <span class="number">1</span>);</span><br><span class="line">tree[f].tag += k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::PushDown(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">PushDown(ls(f), l, mid, tree[f].tag);</span><br><span class="line">PushDown(rs(f), mid + <span class="number">1</span>, r, tree[f].tag);</span><br><span class="line">tree[f].tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span> tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::build(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span><br><span class="line">&#123;</span><br><span class="line">tree[f].tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">tree[f].val = a[l];</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">build(ls(f), a, l, mid);</span><br><span class="line">build(rs(f), a, mid + <span class="number">1</span>, r);</span><br><span class="line">PushUpSum(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ST::query(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= l &amp;&amp; j &lt;= r)</span><br><span class="line"><span class="keyword">return</span> tree[f].val;</span><br><span class="line">PushDown(f, i, j);<span class="comment">//</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (i + j) / <span class="number">2</span>; </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">res += query(ls(f), i, mid, l, r);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">res += query(rs(f), mid + <span class="number">1</span>, j, l, r);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ST::updata(<span class="keyword">long</span> <span class="keyword">long</span> f, <span class="keyword">long</span> <span class="keyword">long</span> i, <span class="keyword">long</span> <span class="keyword">long</span> j, <span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">long</span> <span class="keyword">long</span> val)<span class="comment">//注意i,j和l,r</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= l &amp;&amp; j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">tree[f].val += val * (j - i + <span class="number">1</span>);</span><br><span class="line">tree[f].tag += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (i + j) / <span class="number">2</span>;</span><br><span class="line">PushDown(f, i, j);</span><br><span class="line"><span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">updata(ls(f), i, mid, l, r, val);</span><br><span class="line"><span class="keyword">if</span> (r &gt; mid)</span><br><span class="line">updata(rs(f), mid + <span class="number">1</span>, j, l, r, val);</span><br><span class="line">PushUpSum(f);<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ST st;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[Max], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st.init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">st.build(<span class="number">1</span>, a, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k, x, y, g;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; g;</span><br><span class="line"><span class="keyword">switch</span> (g)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line">st.updata(<span class="number">1</span>, <span class="number">1</span>, n, x, y, k);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; st.query(<span class="number">1</span>, <span class="number">1</span>, n, x, y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料-amp-模板题"><a href="#参考资料-amp-模板题" class="headerlink" title="参考资料&amp;模板题"></a>参考资料&amp;模板题</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91_(%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%AE%B5%E6%A0%91_(%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2</a>)<br><a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%AE%B5%E6%A8%B9_(%E5%84%B2%E5%AD%98%E5%8D%80%E9%96%93" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%AE%B5%E6%A8%B9_(%E5%84%B2%E5%AD%98%E5%8D%80%E9%96%93</a>)</p><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p><a href="https://www.luogu.org/problemnew/show/P3372" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;5&quot;&gt;以下权当废话,不要当真！&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;6&quot;&gt;以下权当废话,不要当真！&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;7&quot;&gt;以下权当废话,不要当真！&lt;/font&gt;&lt;br
      
    
    </summary>
    
    
      <category term="高级数据结构" scheme="https://jeb.website/tags/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://jeb.website/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Dinic-当前弧优化 + 网络流算法时间复杂度纵向对比</title>
    <link href="https://jeb.website/details/2018/08-26-DinicDQHYH.html"/>
    <id>https://jeb.website/details/2018/08-26-DinicDQHYH.html</id>
    <published>2018-08-26T00:27:25.000Z</published>
    <updated>2018-08-26T09:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前的网络流（下）说过，Dinic有一个当前弧优化。那么今天就来说说“当前弧优化”。</p><h2 id="怎么搞？"><a href="#怎么搞？" class="headerlink" title="怎么搞？"></a>怎么搞？</h2><p>当前弧优化也是很简单，只需要改两个地方。</p><h3 id="当前"><a href="#当前" class="headerlink" title="当前"></a>当前</h3><p>因为是“当前”弧优化，所以我们先解决“当前”。</p><p>我们需要在统级函数中加上一个循环复制last到另一个数组里（我以head为例）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NetworkFlows::dinic()</span><br><span class="line">&#123;</span><br><span class="line">mf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (fdinic())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">head[i]=last[i];<span class="comment">//当前弧优化</span></span><br><span class="line"><span class="keyword">while</span> (lf=find(s,<span class="number">1</span>&lt;&lt;<span class="number">26</span>))</span><br><span class="line">mf+=lf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弧优化"><a href="#弧优化" class="headerlink" title="弧优化"></a>弧优化</h3><p>“当前”搞完了，再搞搞剩下的“弧优化”。</p><p>我们这个优化需要在深搜中搞。下面看代码注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> NetworkFlows::find(<span class="keyword">int</span> x,<span class="keyword">int</span> lf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x==t)</span><br><span class="line"><span class="keyword">return</span> lf;</span><br><span class="line"><span class="keyword">int</span> rlf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;i=head[x];i;i=node[i].next)<span class="comment">//注意&amp;i，这样我们才能改变head。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (node[i].v&amp;&amp;dist[y]==dist[x]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (rlf=find(y,min(lf,node[i].v)))</span><br><span class="line">&#123;</span><br><span class="line">node[i].v-=rlf;</span><br><span class="line">node[i^<span class="number">1</span>].v+=rlf;</span><br><span class="line"><span class="keyword">return</span> rlf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们加了之后，我们就能记录优化（具体的只可意会不可言传，要靠理解（笑哭））。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>好了，就讲这么多，下面是源代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkFlows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,next;</span><br><span class="line">&#125;node[Max];</span><br><span class="line"><span class="keyword">int</span> dist[Max];</span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m,mf,head[Max];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> lf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fdinic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::build(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">node[len].y=y,node[len].v=v,node[len].next=last[x],last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span> node);</span><br><span class="line"><span class="keyword">int</span> x,y,v;</span><br><span class="line">len=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v,build(x,y,v),build(y,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> NetworkFlows::fdinic()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line">dist[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (que.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (node[i].v&amp;&amp;dist[y]&gt;dist[x]+<span class="number">1</span>)</span><br><span class="line">dist[y]=dist[x]+<span class="number">1</span>,que.push(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dist[t]!=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NetworkFlows::find(<span class="keyword">int</span> x,<span class="keyword">int</span> lf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x==t)</span><br><span class="line"><span class="keyword">return</span> lf;</span><br><span class="line"><span class="keyword">int</span> rlf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;i=head[x];i;i=node[i].next)<span class="comment">//注意&amp;i，以便改变head[x]进行优化，等同于head[k]=i</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (node[i].v&amp;&amp;dist[y]==dist[x]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (rlf=find(y,min(lf,node[i].v)))</span><br><span class="line">&#123;</span><br><span class="line">node[i].v-=rlf;</span><br><span class="line">node[i^<span class="number">1</span>].v+=rlf;</span><br><span class="line"><span class="keyword">return</span> rlf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mf&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::dinic()</span><br><span class="line">&#123;</span><br><span class="line">mf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (fdinic())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*for (int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">head[i]=last[i];//当前弧优化*/</span></span><br><span class="line"><span class="built_in">memcpy</span>(head+<span class="number">1</span>,last+<span class="number">1</span>,n*<span class="number">4</span>);</span><br><span class="line"><span class="keyword">while</span> (lf=find(s,<span class="number">1</span>&lt;&lt;<span class="number">26</span>))</span><br><span class="line">mf+=lf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NetworkFlows f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f.init();</span><br><span class="line">f.dinic();</span><br><span class="line">f.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效率？"><a href="#效率？" class="headerlink" title="效率？"></a>效率？</h2><p>这里有两张洛谷模板题的截图，第一张没加优化，第二张加了。</p><p><img src="/img/wjyh.png" alt="未加当前弧优化"></p><p><img src="/img/jlyh.png" alt="加了当前弧优化"></p><p>再来一张EK的。</p><p><img src="/img/ekwll.png" alt="EK"></p><font size="2"> 为什么我写的代码时间复杂度这么~~突出~~神奇？</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的网络流（下）说过，Dinic有一个当前弧优化。那么今天就来说说“当前弧优化”。&lt;/p&gt;
&lt;h2 id=&quot;怎么搞？&quot;&gt;&lt;a href=&quot;#怎么搞？&quot; class=&quot;headerlink&quot; title=&quot;怎么搞？&quot;&gt;&lt;/a&gt;怎么搞？&lt;/h2&gt;&lt;p&gt;当前弧优化也是很简单，只
      
    
    </summary>
    
    
      <category term="图论" scheme="https://jeb.website/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="Dinic" scheme="https://jeb.website/tags/Dinic/"/>
    
      <category term="优化" scheme="https://jeb.website/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="网络流" scheme="https://jeb.website/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="效率对比" scheme="https://jeb.website/tags/%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>网络流：进阶篇</title>
    <link href="https://jeb.website/details/2018/08-25-WanLuoLiujj.html"/>
    <id>https://jeb.website/details/2018/08-25-WanLuoLiujj.html</id>
    <published>2018-08-25T03:43:39.000Z</published>
    <updated>2018-08-26T03:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>惊了，竟然还有下</del></p><p>众说周知，EK算法的效率十分低下 (O(VE^2)),所以说，我们今天来讲讲另一种常用的而其更快的算法:Dinic</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>首先说一下Dinic算法是什么</p><blockquote><p>Dinic算法（又称Dinitz算法）是一个在网络流中计算最大流的强多项式复杂度的算法，设想由以色列（前苏联）的计算机科学家Yefim (Chaim) A. Dinitz在1970年提出。<br> 算法O(V^2E)的时间复杂度类似于Edmonds–Karp算法，其时间复杂度为O(VE^2)，Dinic算法与Edmonds–Karp算法的不同之处在于它每轮算法都选择最短的可行路径进行增广。<br> Dinic算法中采用高度标号（level graph）以及阻塞流（blocking flow）实现。(摘自维基百科，<a href="https://zh.wikipedia.org/wiki/Dinic%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">传送门</a>)</p></blockquote><p>蛤？和EK的时间复杂度类似？那我学了有什么用？</p><p>其实，O(V^2E)的时间复杂度是Dinic的理论时间复杂度上限，在实际中几乎永远都跑不满，几乎只能用O(能过)来称之。所以说Dinic还是十分优益的(何况还有当前弧优化)。</p><p>先定义一下各种需要的东西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkFlows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,next;</span><br><span class="line">&#125;node[Max];<span class="comment">//储存邻接表</span></span><br><span class="line"><span class="keyword">int</span> dist[Max];<span class="comment">//储存分层的信息</span></span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m,mf;<span class="comment">//分别是：指向最后一个邻接表的指针，指向最后一个同x（发出点）的指针数组，原点，汇点，点的个数，边的个数，最大流</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> lf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fdinic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>先看看普通的网络流的图长什么样子。</p><p><img src="/img/ptwll.png" alt="普通的网络流"></p><p>Dinic算法基于“分层图”的思想，那么我们再看看分了一次层的网络流的图长什么样子。</p><p><img src="/img/fcwll1.png" alt="分层的网络流"></p><p>第一幅图是普通的网络流的图，而第二层是分了一次层的图。</p><p>我们可以把它想象成立起来的楼，从第0层（源点，以下叫它s）到最后一层（汇点，以下叫它t），每相邻两个楼层有楼梯。而我们的任务是不断把这张分层并且寻找最短的路径。</p><p>首先是如何分层的问题。</p><p>我们需要不断从s点向外拓展并且标上序号，那么我们应该第一时间可以想到广搜。换一个角度理解，就是把边权都为一的图跑SPFA（当然跑其他的也是ok的）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> NetworkFlows::fdinic()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">dist[s]=<span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span> (que.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (node[i].v&amp;&amp;dist[y]&gt;dist[x]+<span class="number">1</span>)<span class="comment">//node[i].v是判断该点是否还有流量可以走</span></span><br><span class="line">dist[y]=dist[x]+<span class="number">1</span>,que.push(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dist[t]!=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寻找"><a href="#寻找" class="headerlink" title="寻找"></a>寻找</h2><p>其次，我们要搞定如何寻找最短路。</p><p>我们已经分好层了，所以我们只需要考虑一条路径上的流量是多少，找出来并减掉它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> NetworkFlows::find(<span class="keyword">int</span> x,<span class="keyword">int</span> lf)<span class="comment">//x是当前寻找的点，lf是这条路径上的最小流</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x==t)<span class="comment">//如果找到就返回最小流</span></span><br><span class="line"><span class="keyword">return</span> lf;</span><br><span class="line"><span class="keyword">int</span> rlf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)<span class="comment">//寻找其他共x的边</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (node[i].v&amp;&amp;dist[y]==dist[x]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (rlf=find(y,min(lf,node[i].v)))<span class="comment">//寻找下一个可以连接点，传min(lf,node[i].v)是为了让当前是最小的流</span></span><br><span class="line">&#123;</span><br><span class="line">node[i].v-=rlf,node[i^<span class="number">1</span>].v+=rlf;<span class="comment">//减掉这条路径的最小流</span></span><br><span class="line"><span class="keyword">return</span> rlf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>那么我们怎么统计出来呢？</p><p>我们还需要两层while循环，一层循环fdinic()以不断寻找分层图，一层find(s,1&lt;<26>&gt;)不断去寻找当前分层图的最小流。</26></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NetworkFlows::dinic()</span><br><span class="line">&#123;</span><br><span class="line">mf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lowf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (fdinic())</span><br><span class="line"><span class="keyword">while</span> (lowf=find(s,<span class="number">1</span>&lt;&lt;<span class="number">26</span>))</span><br><span class="line">mf+=lowf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>好了，剩下的包括初始化和输入之类的应该不用讲了。那我们直接放代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkFlows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,next;</span><br><span class="line">&#125;node[Max];</span><br><span class="line"><span class="keyword">int</span> dist[Max];</span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m,mf;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> lf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fdinic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::build(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">node[len].y=y,node[len].v=v,node[len].next=last[x],last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span> node);</span><br><span class="line"><span class="keyword">int</span> x,y,v;</span><br><span class="line">len=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v,build(x,y,v),build(y,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> NetworkFlows::fdinic()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dist,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">dist[s]=<span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span> (que.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (node[i].v&amp;&amp;dist[y]&gt;dist[x]+<span class="number">1</span>)</span><br><span class="line">dist[y]=dist[x]+<span class="number">1</span>,que.push(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dist[t]!=<span class="number">0x7f7f7f7f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NetworkFlows::find(<span class="keyword">int</span> x,<span class="keyword">int</span> lf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x==t)</span><br><span class="line"><span class="keyword">return</span> lf;</span><br><span class="line"><span class="keyword">int</span> rlf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (node[i].v&amp;&amp;dist[y]==dist[x]+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (rlf=find(y,min(lf,node[i].v)))</span><br><span class="line">&#123;</span><br><span class="line">node[i].v-=rlf,node[i^<span class="number">1</span>].v+=rlf;</span><br><span class="line"><span class="keyword">return</span> rlf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mf&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::dinic()</span><br><span class="line">&#123;</span><br><span class="line">mf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lowf=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (fdinic())</span><br><span class="line"><span class="keyword">while</span> (lowf=find(s,<span class="number">1</span>&lt;&lt;<span class="number">26</span>))</span><br><span class="line">mf+=lowf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NetworkFlows f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f.init();</span><br><span class="line">f.dinic();</span><br><span class="line">f.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料-amp-模板题"><a href="#参考资料-amp-模板题" class="headerlink" title="参考资料&amp;模板题"></a>参考资料&amp;模板题</h2><p><a href="https://zh.wikipedia.org/wiki/Dinic%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Dinic%E7%AE%97%E6%B3%95</a></p><p>模板题点<a href="https://www.luogu.org/problemnew/show/P3376" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;惊了，竟然还有下&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;众说周知，EK算法的效率十分低下 (O(VE^2)),所以说，我们今天来讲讲另一种常用的而其更快的算法:Dinic&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="图论" scheme="https://jeb.website/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="Dinic" scheme="https://jeb.website/tags/Dinic/"/>
    
      <category term="网络流" scheme="https://jeb.website/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://jeb.website/details/2018/08-25-Heap.html"/>
    <id>https://jeb.website/details/2018/08-25-Heap.html</id>
    <published>2018-08-24T18:56:10.000Z</published>
    <updated>2018-08-26T08:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>好，今天来讲堆。</p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p>先讲一个十分偷懒的方法：STL中的容器：priority_queue（优先队列）</p><p>首先要先包含库,priority_queue包含于queue中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><p>先声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">Container</span> = <span class="title">vector</span>&lt;T&gt;,</span></span><br><span class="line"><span class="class">          <span class="title">class</span> <span class="title">Compare</span> = <span class="title">less</span>&lt;typename Container::value_type&gt; &gt; <span class="title">class</span> <span class="title">priority_queue</span>;</span></span><br></pre></td></tr></table></figure><p>什么？看不懂？这里有一个简单版的~~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">typename</span><span class="comment">/*你要定义的类型名*/</span>,<span class="built_in">vector</span>&lt;<span class="keyword">typename</span>/*同上*/&gt; q;</span><br></pre></td></tr></table></figure><p>默认是小根堆，如果想要大根堆怎么办?那就改成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">typename</span><span class="comment">/*你要定义的类型名*/</span>,<span class="built_in">vector</span>&lt;<span class="keyword">typename</span>/*同上*/,greater&lt;<span class="keyword">typename</span>/*依然同上*/&gt; &gt; q;</span><br></pre></td></tr></table></figure><p>啥？你自己写的结构体/类？那就重载&lt;号就行了！</p><p>还有几个比较常用的操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.push(x)<span class="comment">//把x放入队中</span></span><br><span class="line">q.pop()<span class="comment">//把队头删除出</span></span><br><span class="line">x=q.top()<span class="comment">//取出队头的值（不会删掉）</span></span><br><span class="line">l=q.size()<span class="comment">//获得队列中元素数量</span></span><br></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>好，讲正事：堆咋搞？</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>我们以小根堆为例，首先要知道的是，堆是一棵完全二叉树，像这样</p><p><img src="/img/duiliz.png" alt="堆的例子"></p><p>可以看出规律：</p><blockquote><p>A[i]&lt;=A[i<em>2], A[i]&lt;=A[i</em>2+1]</p></blockquote><p>堆基本支持以下几种操作（其实我合并了一下，想了解完整的点<a href="https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)" target="_blank" rel="noopener">这里</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push(k)</span><br><span class="line">pop()</span><br><span class="line">top()</span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先，我们先把该定义的给它定义了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tree[<span class="number">1000000</span>],len;<span class="comment">//heap数组作为储存树用，len则指向最后一个元素</span></span><br></pre></td></tr></table></figure><p>然后我们一个个实现这些操作。</p><h4 id="push-k"><a href="#push-k" class="headerlink" title="push(k)"></a>push(k)</h4><p>我们先把k放入堆尾，不管它有没有序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap[++len]=k;</span><br></pre></td></tr></table></figure><p>然后我们需要一些操作来维持它的性质。定义指针now和next分别指向堆尾和堆尾的父节点，也就是now/2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> now=len,next=now/<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>然后呢，我们用一个while循环直到now到顶（==1）或者我们在中途打断它为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (now)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[now] &lt; tree[next])<span class="comment">//判断是否符合性质</span></span><br><span class="line">        swap(tree[now], tree[next]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//如果没有交换，根据性质，该堆已经符合了性质，就可以退了</span></span><br><span class="line">    now = next, next = now / <span class="number">2</span>;<span class="comment">//寻找下一个结点和其父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>push(k)就完成了。</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>先把堆顶结点删掉。这个就有很多办法了。我选择把堆顶和堆尾交换然后len—。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swap(tree[<span class="number">1</span>], tree[len]);</span><br><span class="line">len--;</span><br></pre></td></tr></table></figure><p>然后依然建立指针now和next，不过这次的now指向堆顶，next指向他的左子结点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>, next = now * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>还是使用while循环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (next &lt;= len)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (next &lt; len &amp;&amp; tree[next] &gt; tree[next + <span class="number">1</span>])<span class="comment">//找出较小的子结点</span></span><br><span class="line">        next++;</span><br><span class="line">    <span class="keyword">if</span> (tree[now] &gt; tree[next])<span class="comment">//注意大于号和小于号，push是从下至上而pop是从上至下所以应该反过来。</span></span><br><span class="line">        swap(tree[now], tree[next]);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//同上</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    now = next, next = now * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="top"><a href="#top" class="headerlink" title="top()"></a>top()</h4><p>这个没什么好讲，直接把堆顶拿了就是了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> tree[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heap</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tree[Max];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::push(<span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line">    tree[++len] = k;</span><br><span class="line">    <span class="keyword">int</span> now = len, next = len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (now)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[now] &lt; tree[next])</span><br><span class="line">            swap(tree[now], tree[next]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        now = next, next = now / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::pop()</span><br><span class="line">&#123;</span><br><span class="line">    swap(tree[<span class="number">1</span>], tree[len]);</span><br><span class="line">    len--;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>, next = now * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (next &lt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; len &amp;&amp; tree[next] &gt; tree[next + <span class="number">1</span>])</span><br><span class="line">            next++;</span><br><span class="line">        <span class="keyword">if</span> (tree[now] &gt; tree[next])</span><br><span class="line">            swap(tree[now], tree[next]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        now = next, next = now * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree[len + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::top()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Heap::clear()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="keyword">sizeof</span> tree);</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Heap::size()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"></span><br><span class="line">Heap heap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料-amp-模板题"><a href="#参考资料-amp-模板题" class="headerlink" title="参考资料&amp;模板题"></a>参考资料&amp;模板题</h2><p><a href="https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%A0%86_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84</a>)</p><p><a href="https://baike.baidu.com/item/最小堆/9139372?fromtitle=小根堆&amp;fromid=4633461&amp;fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/最小堆/9139372?fromtitle=小根堆&amp;fromid=4633461&amp;fr=aladdin</a></p><p>模板题点<a href="https://www.luogu.org/problemnew/show/P3378" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好，今天来讲堆。&lt;/p&gt;
&lt;h2 id=&quot;priority-queue&quot;&gt;&lt;a href=&quot;#priority-queue&quot; class=&quot;headerlink&quot; title=&quot;priority_queue&quot;&gt;&lt;/a&gt;priority_queue&lt;/h2&gt;&lt;p&gt;先讲一个十分
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://jeb.website/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="https://jeb.website/tags/%E5%A0%86/"/>
    
      <category term="优先队列" scheme="https://jeb.website/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>单源点最短路径(上)</title>
    <link href="https://jeb.website/details/2018/08-22-DanYuanDianZuiDuanLuJIng.html"/>
    <id>https://jeb.website/details/2018/08-22-DanYuanDianZuiDuanLuJIng.html</id>
    <published>2018-08-22T14:54:07.000Z</published>
    <updated>2018-08-26T03:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><del>依然很可能没有下</del></p><h2 id="最短路径？"><a href="#最短路径？" class="headerlink" title="最短路径？"></a>最短路径？</h2><p>科科。<br>说到最短路径，那么首先，最短路径是什么呢？很明显，是一个点到另一个点可行路径的最小权值和（废话）</p><p>上一幅图</p><p><img src="/img/wxtlz.png" alt="无向图的例子"></p><p>我们设s=1，t=8，求的就是s~t中可行路径的权值和（要注意，边是双向的）</p><p>当然，最简单的办法是直接建立邻接矩阵，然后循环每个可行路径，最后找到最短路径。这就是Floyd算法。因为每个边都要拓展一次，所以说其时间复杂度是很大的（O(n^3)）。</p><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>所以说，我们这时应该换下思路。在Floyd中，我们使用“点”为标志存储，那我们可不可以使用“边”为标志存储呢？当然可以！邻接图！</p><p>在下文中，我们把边的起点，终点和权值分别叫做x，y和d。我们使用一个结构体来储存边的y,d和上一条同x的边。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> y,d,next;</span><br><span class="line">&#125;node[<span class="number">1000000</span>];</span><br></pre></td></tr></table></figure><p>为了储存上一条同x点边的下标，我们还需要一个数组last。同时，我们还需要一个变量len来储存当前边的下标以及一个数组ans来储存s-&gt;当前点的答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len,last[<span class="number">1000000</span>],ans[<span class="number">1000000</span>];</span><br></pre></td></tr></table></figure><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><p>好，万事俱备。那么怎么求出最短路呢?先讲一个初级的算法：SPFA (shortest path faster algorithm)。这是Bellman-Ford算法的队列优化，SPFA只在中国大陆通用。发明者是个国人，<a href="https://wenku.baidu.com/view/3b8c5d778e9951e79a892705.html" target="_blank" rel="noopener">这是</a>论文。</p><p>队列优化是什么？当然是广度优先搜索啦！</p><p>我们先将s点入队，并建立一个标记，然后进入一个循环，不断从队列中取出队头并拓展（专业点叫做“松弛”）。问题来了，怎么不断找到同端点的点呢？其实很简单，只需要一个循环就可以了。我们先从last数组中取出最后的一条边，再不断通过当前边的next找下一条边就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[kx].next)<span class="comment">//我们把队头的点叫做kx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//.......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再把当前边的y叫做ky，把当前边的d叫做kd。如果ans[ky]&gt;ans[kx]+kd，那么就说明走这条边可能得到最优解，所以我们更新ans[ky]的值并判断有没有打上标记，没有的话，说明没有入队，那我们就把他入队。记得在循环的后面要把那个标记抹掉。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ky=node[i].y;</span><br><span class="line">    <span class="keyword">if</span> (ans[ky]&gt;ans[kx]+node[i].d)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[ky]=ans[kx]+node[i].d;</span><br><span class="line">        <span class="keyword">if</span> (!pd.count(ky))</span><br><span class="line">        &#123;</span><br><span class="line">            pd.insert(ky);</span><br><span class="line">            que.push(ky);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max1 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max2 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max3 Max1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SPFA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pc</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">bool</span> ps[Max3];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> x,y,d,next;</span><br><span class="line">    &#125;;</span><br><span class="line">Node node[Max1];</span><br><span class="line">    <span class="keyword">int</span> last[Max2],len,ans[Max1];</span><br><span class="line">    Pc pd;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MakeLine</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span>;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> SPFA::Pc::count(<span class="keyword">int</span> k)&#123;<span class="keyword">return</span> (ps[k]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::Pc::insert(<span class="keyword">int</span> k)&#123;ps[k]=<span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::Pc::clear()&#123;<span class="built_in">memset</span>(ps,<span class="number">0</span>,<span class="keyword">sizeof</span> ps);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> SPFA::Pc::erase(<span class="keyword">int</span> k)&#123;ps[k]=<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::MakeLine(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span><br><span class="line">&#123;</span><br><span class="line">    len++;</span><br><span class="line">    node[len].x=x,node[len].y=y,node[len].d=d,node[len].next=last[x];</span><br><span class="line">    last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SPFA::calc(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0x7f</span>,<span class="keyword">sizeof</span> ans);</span><br><span class="line">    ans[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (que.size())</span><br><span class="line">        que.pop();</span><br><span class="line">    pd.clear();</span><br><span class="line">    que.push(x);</span><br><span class="line">    pd.insert(x);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> kx=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">    pd.erase(kx);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=last[kx];i;i=node[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ky=node[i].y;</span><br><span class="line">            <span class="keyword">if</span> (ans[ky]&gt;ans[kx]+node[i].d)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[ky]=ans[kx]+node[i].d;</span><br><span class="line">                <span class="keyword">if</span> (!pd.count(ky))</span><br><span class="line">                &#123;</span><br><span class="line">                    pd.insert(ky);</span><br><span class="line">                    que.push(ky);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[y]==<span class="number">0x7f7f7f7f</span>?<span class="number">-1</span>:ans[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SPFA::scan(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v;</span><br><span class="line">        MakeLine(x,y,v);</span><br><span class="line">        MakeLine(y,x,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------</span></span><br><span class="line"></span><br><span class="line">SPFA spfa;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    spfa.scan(m);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;spfa.calc(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>这个算法时间复杂度虽然还ok，但是稠密图是会下降为O(VE)。</p><p><del>话说平均复杂度竟然是通过实验得出的，太不靠谱了吧？</del></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95</a></p><p><a href="https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&amp;fromid=11018124&amp;fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/SPFA%E7%AE%97%E6%B3%95/8297411?fromtitle=SPFA&amp;fromid=11018124&amp;fr=aladdin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;del&gt;依然很可能没有下&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;最短路径？&quot;&gt;&lt;a href=&quot;#最短路径？&quot; class=&quot;headerlink&quot; title=&quot;最短路径？&quot;&gt;&lt;/a&gt;最短路径？&lt;/h2&gt;&lt;p&gt;科科。&lt;br&gt;说到最短路径，那么首先，最短路径是什么呢？很明显
      
    
    </summary>
    
    
      <category term="图论" scheme="https://jeb.website/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路径" scheme="https://jeb.website/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="SPFA" scheme="https://jeb.website/tags/SPFA/"/>
    
  </entry>
  
  <entry>
    <title>网络流：入门篇</title>
    <link href="https://jeb.website/details/2018/08-04-WanLuoLiurm.html"/>
    <id>https://jeb.website/details/2018/08-04-WanLuoLiurm.html</id>
    <published>2018-08-04T13:27:54.000Z</published>
    <updated>2018-08-26T03:48:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>（<del>也不知道会不会有进阶篇</del>）</p><h2 id="Part1-最大流"><a href="#Part1-最大流" class="headerlink" title="Part1 最大流"></a>Part1 最大流</h2><h3 id="什么叫网络流"><a href="#什么叫网络流" class="headerlink" title="什么叫网络流"></a>什么叫网络流</h3><p>   okok，我们先来讲一下什么叫网络流<br>   这里有一幅图</p><p><img src="/img/wlz.png" alt="网络流的例子"></p><p>  每一个边都有一个流量，我们叫它V<br>  把它想象成一个自来水厂和你家之间的供水线路，有一个原点s(自来水厂)和一个汇点t(你家)。问你家在一个单位时间内最大可以有多少水用。</p><p>  很明显，水的多少取决于最小的边的流量。在这张图中，你家最多可以有7+4=13的水。</p><p>  那么算法的关键就是如何找出最小的边并拓展。</p><h3 id="EK"><a href="#EK" class="headerlink" title="EK"></a>EK</h3><p>  祭出大法：EK(Edmonds-Karp)算法！</p><p>  先看下定义。</p><h4 id="定义-amp-实现"><a href="#定义-amp-实现" class="headerlink" title="定义&amp;实现"></a>定义&amp;实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,next;</span><br><span class="line">&#125;node[Max];<span class="comment">//记录边，y为尾，v为该边流量，next为下一条同首的边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line">&#125;pre[Max];<span class="comment">//记录当前增广路的边，x为首，i为尾。</span></span><br><span class="line"><span class="keyword">bool</span> pd[Max];<span class="comment">//判断是否在队中</span></span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m;<span class="comment">//len是用于记录边的，last当前是以x为首的最后一条边。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span>;<span class="comment">//寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;<span class="comment">//建边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span></span>;<span class="comment">//循环计数</span></span><br></pre></td></tr></table></figure><p>  该算法使用一个张扬而不做作的广搜，拓展所有以que.front()为开头的边(初始化时，s入队)，当判断它没有被记录时，记录。当当前拓展的边就是t时,返回1。当队列为空时，说明所有的边以及拓展完毕，没有找到t，就是没有从s-&gt;t的边，返回0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(pd,<span class="number">0</span>,<span class="keyword">sizeof</span> pd);</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line">pd[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)<span class="comment">//寻找以x为首的边（或者说x可以拓展的边）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (!pd[y]&amp;&amp;node[i].v)<span class="comment">//如果当前边没有被记录过并且还有空间可以流水</span></span><br><span class="line">&#123;</span><br><span class="line">pd[y]=<span class="number">1</span>;<span class="comment">//打上标记，表示被记录</span></span><br><span class="line">pre[y].x=x;<span class="comment">//记录边</span></span><br><span class="line">pre[y].i=i;<span class="comment">//同上</span></span><br><span class="line">que.push(y);<span class="comment">//入队</span></span><br><span class="line"><span class="keyword">if</span> (y==t)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  再使用一个低调奢华有内涵的循环。当当前还存在增广路的话，循环遍历寻找增广路上最小的值，再循环遍历剪掉。此时，最大流加上当前的最小的值。</p><p>  当广搜返回0时，说明没有增广路了，当前已累计最大流。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (find())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">minn=min(minn,node[pre[i].i].v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">node[pre[i].i].v-=minn,node[pre[i].i^<span class="number">1</span>].v+=minn;<span class="comment">//要注意，len要从一个奇数开始，这样把当前的编号^1就是其反向边的编号;我喜欢用1.你用其他的话你自己修改。</span></span><br><span class="line">ans+=minn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure><h4 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h4><p>什么？你想要完整版？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkFlows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,next;</span><br><span class="line">&#125;node[Max];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line">&#125;pre[Max];</span><br><span class="line"><span class="keyword">bool</span> pd[Max];</span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EK</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::build(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">node[len].y=y,node[len].v=v,node[len].next=last[x],last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span> node);</span><br><span class="line"><span class="keyword">int</span> x,y,d;</span><br><span class="line">len=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;d,build(x,y,d),build(y,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> NetworkFlows::find()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(pd,<span class="number">0</span>,<span class="keyword">sizeof</span> pd);</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line">pd[s]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (!pd[y]&amp;&amp;node[i].v)</span><br><span class="line">&#123;</span><br><span class="line">pd[y]=<span class="number">1</span>;</span><br><span class="line">pre[y].x=x;</span><br><span class="line">pre[y].i=i;</span><br><span class="line">que.push(y);</span><br><span class="line"><span class="keyword">if</span> (y==t)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NetworkFlows::EK()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (find())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">minn=min(minn,node[pre[i].i].v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">node[pre[i].i].v-=minn,node[pre[i].i^<span class="number">1</span>].v+=minn;</span><br><span class="line">ans+=minn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NetworkFlows f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f.init();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f.EK()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>咯！<br>需要特别注意的是，要加上反向边！！！拓展到反向边时，要加上当前最小的值<br>你问我为什么？<br>我怎么知道！ (╯≥▽≤)╯~ ┴—┴</p><p>咳咳，其实这样才可以有后悔的机会嘛。</p><h2 id="Part2-最小费用最大流"><a href="#Part2-最小费用最大流" class="headerlink" title="Part2 最小费用最大流"></a>Part2 最小费用最大流</h2><h3 id="什么是“最小费用”"><a href="#什么是“最小费用”" class="headerlink" title="什么是“最小费用”"></a>什么是“最小费用”</h3><p>先看一下最小费用是啥</p><p><img src="/img/sbl.png" alt="最小费用最大流"></p><p>我们在流量v的基础上又加了一个花费w，我们要求的是最大流中的最小花费</p><p>说到最小费用先想到什么呢？最短路！所以我们可以用一个最短路算法（也就是说把原来的广搜换成最短路并记录路径）（我喜欢用spfa<del>毕竟我不会其他的</del>）来求出一条s-&gt;t花费最小的边并累加费用和流量就ok了！</p><p>要注意，我们要在加反向边且v为0的基础上，同时设反向边的w为-w，这样我们便有后悔的机会。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>放出代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 1100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkFlows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> y,v,w,next;</span><br><span class="line">&#125;node[Max];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,i;</span><br><span class="line">&#125;pre[Max];</span><br><span class="line"><span class="keyword">bool</span> pd[Max];</span><br><span class="line"><span class="keyword">int</span> spfa[Max];</span><br><span class="line"><span class="keyword">int</span> len,last[Max],s,t,n,m,mf,co;<span class="comment">//co是花费</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EK</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::build(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">node[len].y=y,node[len].v=v,node[len].w=w,node[len].next=last[x],last[x]=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::init()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span> node);</span><br><span class="line"><span class="keyword">int</span> x,y,v,w;</span><br><span class="line">len=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v&gt;&gt;w,build(x,y,v,w),build(y,x,<span class="number">0</span>,-w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> NetworkFlows::find()<span class="comment">//spfa求最短路</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(pd,<span class="number">0</span>,<span class="keyword">sizeof</span> pd);</span><br><span class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">memset</span>(spfa,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> spfa);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(s);</span><br><span class="line">pd[s]=<span class="number">1</span>;</span><br><span class="line">spfa[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=que.front();</span><br><span class="line">que.pop();</span><br><span class="line">pd[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=node[i].y;</span><br><span class="line"><span class="keyword">if</span> (spfa[y]&gt;spfa[x]+node[i].w&amp;&amp;node[i].v)</span><br><span class="line">&#123;</span><br><span class="line">spfa[y]=spfa[x]+node[i].w;</span><br><span class="line">pre[y].i=i,pre[y].x=x;</span><br><span class="line"><span class="keyword">if</span> (!pd[y])</span><br><span class="line">pd[y]=<span class="number">1</span>,que.push(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> spfa[t]!=<span class="number">0x3f3f3f3f</span>;<span class="comment">//是否有s-&gt;t的路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mf&lt;&lt;<span class="string">' '</span>&lt;&lt;co&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> NetworkFlows::EK()</span><br><span class="line">&#123;</span><br><span class="line">mf=<span class="number">0</span>,co=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (find())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn=<span class="number">1</span>&lt;&lt;<span class="number">26</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">minn=min(minn,node[pre[i].i].v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=t;i!=s;i=pre[i].x)</span><br><span class="line">node[pre[i].i].v-=minn,node[pre[i].i^<span class="number">1</span>].v+=minn;</span><br><span class="line">mf+=minn;</span><br><span class="line">co+=minn*spfa[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NetworkFlows f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f.init();</span><br><span class="line">f.EK();</span><br><span class="line">f.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（&lt;del&gt;也不知道会不会有进阶篇&lt;/del&gt;）&lt;/p&gt;
&lt;h2 id=&quot;Part1-最大流&quot;&gt;&lt;a href=&quot;#Part1-最大流&quot; class=&quot;headerlink&quot; title=&quot;Part1 最大流&quot;&gt;&lt;/a&gt;Part1 最大流&lt;/h2&gt;&lt;h3 id=&quot;什么叫网络
      
    
    </summary>
    
    
      <category term="图论" scheme="https://jeb.website/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://jeb.website/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="EK" scheme="https://jeb.website/tags/EK/"/>
    
  </entry>
  
</feed>
